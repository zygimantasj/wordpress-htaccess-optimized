########################################################################
# THE ULTIMATE WORDPRESS .htaccess FOR SPEED, SECURITY & SEO
# ----------------------------------------------------------------------
# @Version: 1.0.0 - June 2025
# @Author: Optimized by ZygimantasJ (based on various authoritative sources,
#          including Andreas Hecht from seoagentur-hamburg.com)
# License: GNU General Public License v2 or later
# License URI: http://www.gnu.org/licenses/gpl-2.0.html
########################################################################

# ----------------------------------------------------------------------
# | 1. Core Server Settings & Fundamental Security Headers
# ----------------------------------------------------------------------

# Custom Error Pages: Redirects specific HTTP error codes to custom error pages.
# This improves user experience and prevents information disclosure.
# More: https://httpd.apache.org/docs/current/howto/custom-error.html
ErrorDocument 404 /404.php
ErrorDocument 403 /403.php

# Server Signature Off: Prevents Apache from displaying its version number and OS information.
# This is a security best practice to avoid revealing server details to potential attackers.
# More: https://httpd.apache.org/docs/current/mod/core.html#serversignature
ServerSignature Off

# X-Frame-Options: Protects against Clickjacking attacks.
# "SAMEORIGIN" allows the page to be displayed in a frame only on the same origin as the page itself.
# More: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
<IfModule mod_headers.c>
    Header always set X-Frame-Options "SAMEORIGIN"
</IfModule>

# X-XSS-Protection: Enables the Cross-Site Scripting (XSS) filter in modern browsers.
# "1; mode=block" means if an XSS attack is detected, the browser will stop rendering the page.
# More: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
<IfModule mod_headers.c>
    Header always set X-XSS-Protection "1; mode=block"
</IfModule>

# X-Content-Type-Options: Prevents MIME type sniffing.
# "nosniff" forces browsers to adhere to the MIME type declared in the Content-Type header,
# preventing browsers from trying to guess content types, which can lead to XSS vulnerabilities.
# More: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
<IfModule mod_headers.c>
    Header always set X-Content-Type-Options "nosniff"
</IfModule>

# Referrer-Policy: Controls how much referrer information is sent with requests.
# "strict-origin-when-cross-origin" sends the origin for cross-origin requests and the full URL for same-origin requests.
# This balances privacy with necessary analytics.
# More: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy
# Also: https://scotthelme.co.uk/a-new-security-header-referrer-policy/
<IfModule mod_headers.c>
    Header always set Referrer-Policy "strict-origin-when-cross-origin"
</IfModule>

# Strict-Transport-Security (HSTS): Enforces HTTPS for all future connections.
# "max-age" specifies how long browsers should remember to only access the site via HTTPS.
# "includeSubDomains" applies the policy to all subdomains. "preload" allows inclusion in browser HSTS preload lists.
# IMPORTANT: Ensure your site fully supports HTTPS before enabling this. Misconfiguration can make your site inaccessible.
# More: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
<IfModule mod_headers.c>
    Header always set Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" env=HTTPS
</IfModule>

# Content-Security-Policy (CSP): Upgrades insecure HTTP requests to HTTPS.
# "upgrade-insecure-requests" instructs user agents to rewrite URL schemes, preventing mixed content issues.
# NOTE: For complex sites with external resources, a more detailed CSP might be needed, which can be complex.
# This is a good baseline to mitigate common mixed content warnings.
# More: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy
<IfModule mod_headers.c>
    Header always set Content-Security-Policy "upgrade-insecure-requests"
</IfModule>

# Permissions-Policy (formerly Feature-Policy): Controls browser features access.
# Restricts the browser's ability to access sensitive features (e.g., camera, microphone, geolocation) for security and privacy.
# Listed features are disabled for all contexts (empty parentheses), except 'fullscreen' which is allowed for 'self' origin.
# More: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy
<IfModule mod_headers.c>
    Header always set Permissions-Policy "geolocation=(), midi=(), sync-xhr=(), accelerometer=(), gyroscope=(), magnetometer=(), camera=(), fullscreen=(self), payment=(), usb=()"
</IfModule>

# ----------------------------------------------------------------------
# | 2. HTTP to HTTPS Redirection (Conditional Use)
# |   (Activate ONLY if your hosting/CDN does not handle this automatically, e.g., Cloudways)
# ----------------------------------------------------------------------

# If you need to force HTTPS for all traffic and your host doesn't do it:
# <IfModule mod_rewrite.c>
# RewriteEngine On
# RewriteCond %{HTTPS} off
# RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]
# </IfModule>

# ----------------------------------------------------------------------
# | 3. Cross-Origin Resource Sharing (CORS) Configuration
# |   (Essential for loading assets like web fonts from different domains or CDNs)
# ----------------------------------------------------------------------

# Allows specified file types to be accessed from any origin (*).
# This is crucial for assets served from a CDN or different subdomain to avoid CORS errors.
# More: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS
<IfModule mod_headers.c>
    <FilesMatch "\.(ttf|ttc|otf|eot|woff|woff2|font\.css|css|js|mjs|gif|png|jpe?g|svg|svgz|ico|webp|avif)$">
        Header set Access-Control-Allow-Origin "*"
    </FilesMatch>
</IfModule>

# ----------------------------------------------------------------------
# | 4. Advanced Security: Malicious Request & Bot Blocking
# |   (Proactively blocks common attacks, nuisance requests, and known scanners)
# ----------------------------------------------------------------------

<IfModule mod_rewrite.c>
    RewriteEngine On
    # Block suspicious PHP file extensions often used in exploits.
    RewriteRule \.php\.suspected - [F,NC,L]
    # Block Apple app-site-association checks, often used for reconnaissance by bots.
    RewriteRule ^apple-app-site-association$ - [F,NC,L]
    # Block Autodiscover XML requests, frequently used by Outlook/Office scanners.
    RewriteRule ^autodiscover/autodiscover\.xml$ - [F,NC,L]

    # Block common WordPress reconnaissance files/paths and exploit attempts.
    # Prevents access to sensitive system files and directories.
    # More: https://www.wpbeginner.com/wp-tutorials/how-to-block-bad-bots-in-wordpress-using-htaccess/
    # Also: https://sucuri.net/guides/wordpress-security/
    RewriteRule ^\.well-known/security\.txt$ - [F,NC,L] # Standard file for security disclosures.
    RewriteRule ^readme\.html$ - [F,NC,L] # Blocks access to WordPress readme file, which reveals version info.
    RewriteRule ^xmlrpc\.php$ - [F,NC,L] # Blocks XML-RPC API (often exploited). Use with caution if plugins rely on it.
    RewriteRule ^wp-config\.bak$ - [F,NC,L] # Blocks access to backup copies of wp-config.php.
    RewriteRule ^wp-content/debug\.log$ - [F,NC,L] # Blocks access to debug logs, which may contain sensitive info.
    RewriteRule ^wp-content/uploads/.*\.(php|phps|phtml)$ - [F,NC,L] # Prevents PHP execution in the uploads directory.
    RewriteRule ^wp-includes/(.*\.php)$ - [F,NC,L] # Protects the wp-includes directory from direct PHP file access.
</IfModule>

# ----------------------------------------------------------------------
# | 5. Browser Caching with mod_expires
# |   (Sets expiration dates for static assets to improve load times for repeat visitors)
# ----------------------------------------------------------------------

<IfModule mod_expires.c>
    ExpiresActive on
    # Default cache duration for all files if not explicitly set below.
    ExpiresDefault "access plus 1 month"

    # Aggressive caching for static assets (CSS, JS, images, fonts).
    # These files change infrequently and benefit most from long-term caching.
    ExpiresByType text/css "access plus 1 year"
    ExpiresByType application/javascript "access plus 1 year"
    ExpiresByType application/x-javascript "access plus 1 year"
    ExpiresByType text/javascript "access plus 1 year"
    ExpiresByType image/bmp "access plus 1 year"
    ExpiresByType image/gif "access plus 1 year"
    ExpiresByType image/jpeg "access plus 1 year"
    ExpiresByType image/png "access plus 1 year"
    ExpiresByType image/svg+xml "access plus 1 year"
    ExpiresByType image/webp "access plus 1 year"
    ExpiresByType image/avif "access plus 1 year" # Added support for AVIF image format
    ExpiresByType application/vnd.ms-fontobject "access plus 1 year"
    ExpiresByType font/eot "access plus 1 year"
    ExpiresByType font/opentype "access plus 1 year"
    ExpiresByType application/x-font-ttf "access plus 1 year"
    ExpiresByType application/font-woff "access plus 1 year"
    ExpiresByType application/x-font-woff "access plus 1 year"
    ExpiresByType font/woff "access plus 1 year"
    ExpiresByType application/font-woff2 "access plus 1 year"
    ExpiresByType audio/ogg "access plus 1 year"
    ExpiresByType video/mp4 "access plus 1 year"
    ExpiresByType video/ogg "access plus 1 year"
    ExpiresByType video/webm "access plus 1 year"

    # Shorter caching for frequently updated or less critical assets.
    ExpiresByType application/manifest+json "access plus 1 week"
    ExpiresByType image/vnd.microsoft.icon "access plus 1 week"
    ExpiresByType image/x-icon "access plus 1 week"
    ExpiresByType text/x-cross-domain-policy "access plus 1 week"

    # No caching or very short caching for dynamic content and API responses.
    # This ensures fresh content is always served.
    ExpiresByType application/atom+xml "access plus 1 hour"
    ExpiresByType application/rdf+xml "access plus 1 hour"
    ExpiresByType application/rss+xml "access plus 1 hour"
    ExpiresByType application/json "access plus 0 seconds"
    ExpiresByType application/ld+json "access plus 0 seconds"
    ExpiresByType application/schema+json "access plus 0 seconds"
    ExpiresByType application/vnd.geo+json "access plus 0 seconds"
    ExpiresByType application/xml "access plus 0 seconds"
    ExpiresByType text/xml "access plus 0 seconds"
    ExpiresByType text/html "access plus 0 seconds"

    # Disable ETag: Prevents potential caching conflicts with CDNs and reverse proxies.
    # When disabled, caching relies solely on Expires/Cache-Control headers.
    # More: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag
    <IfModule mod_headers.c>
        Header unset ETag
    </IfModule>
    FileETag None
</IfModule>

# ----------------------------------------------------------------------
# | 6. Compression (GZIP / Deflate)
# |   (Reduces file size before sending to the browser, significantly speeding up downloads)
# ----------------------------------------------------------------------

<IfModule mod_deflate.c>
    # AddOutputFilterByType DEFLATE applies GZIP compression to the specified MIME types.
    # This reduces bandwidth usage and improves page load times for text-based content.
    # More: https://httpd.apache.org/docs/current/mod/mod_deflate.html
    AddOutputFilterByType DEFLATE text/plain
    AddOutputFilterByType DEFLATE text/html
    AddOutputFilterByType DEFLATE text/xml
    AddOutputFilterByType DEFLATE text/css
    AddOutputFilterByType DEFLATE text/vtt
    AddOutputFilterByType DEFLATE text/x-component
    AddOutputFilterByType DEFLATE application/xml
    AddOutputFilterByType DEFLATE application/xhtml+xml
    AddOutputFilterByType DEFLATE application/rss+xml
    AddOutputFilterByType DEFLATE application/js
    AddOutputFilterByType DEFLATE application/javascript
    AddOutputFilterByType DEFLATE application/x-javascript
    AddOutputFilterByType DEFLATE application/x-httpd-php
    AddOutputFilterByType DEFLATE application/x-httpd-fastphp
    AddOutputFilterByType DEFLATE application/atom+xml
    AddOutputFilterByType DEFLATE application/json
    AddOutputFilterByType DEFLATE application/ld+json
    AddOutputFilterByType DEFLATE application/vnd.ms-fontobject
    AddOutputFilterByType DEFLATE application/x-font-ttf
    AddOutputFilterByType DEFLATE application/font-woff2
    AddOutputFilterByType DEFLATE application/x-font-woff
    AddOutputFilterByType DEFLATE font/woff
    AddOutputFilterByType DEFLATE font/opentype
    AddOutputFilterByType DEFLATE image/svg+xml
    AddOutputFilterByType DEFLATE application/vnd.api+json # Added for JSON APIs

    # SetEnvIfNoCase REQUEST_URI \.(?:...) no-gzip dont-vary:
    # Prevents re-compression of files that are already compressed (e.g., images, videos, archives).
    # This avoids potential corruption or inefficiency.
    SetEnvIfNoCase Request_URI \.(?:gif|jpe?g|png|webp|avif|mp4|webm|ogg|zip|rar|gz|tgz|bz2|pdf|xlsx|docx)$ no-gzip dont-vary

    # Browser-specific rules for compatibility with older browsers (e.g., IE 6)
    # These ensure that content is served correctly even to less capable clients.
    BrowserMatch ^Mozilla/4 gzip-only-text/html
    BrowserMatch ^Mozilla/4\.0[678] no-gzip
    BrowserMatch \bMSI[E] !no-gzip !gzip-only-text/html

    # Header append Vary Accept-Encoding:
    # Informs proxies and CDNs that the response varies depending on the Accept-Encoding header.
    # This helps prevent serving cached uncompressed content to clients that support compression.
    # More: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Vary
    <IfModule mod_headers.c>
        Header append Vary Accept-Encoding env=!dont-vary
    </IfModule>
</IfModule>

# ----------------------------------------------------------------------
# | 7. Cache-Control Header Directives (Granular Caching)
# |   (Provides more precise caching instructions to browsers and proxies)
# ----------------------------------------------------------------------

<IfModule mod_headers.c>
    # For highly static assets (e.g., images, fonts, minified CSS/JS) that won't change unless their URL changes.
    # "max-age=31536000" sets a 1-year cache. "public" allows caching by proxies. "immutable" means it will not change.
    # More: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#immutable
    <FilesMatch "\.(ico|pdf|flv|swf|js|mjs|css|gif|png|jpg|jpeg|webp|avif|txt|woff2|woff|ttf|eot|svg)$">
        Header set Cache-Control "max-age=31536000, public, immutable"
    </FilesMatch>
    # For dynamic content (HTML, PHP, XML, JSON) that needs to be revalidated on each visit.
    # "max-age=0" means no cache. "must-revalidate" forces the browser to check with the server for a fresh copy.
    # More: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control
    <FilesMatch "\.(html|htm|php|xml|json)$">
        Header set Cache-Control "max-age=0, must-revalidate"
    </FilesMatch>
</IfModule>

# ----------------------------------------------------------------------
# | 8. Hotlink Protection (Optional)
# |   (Prevents other websites from directly embedding your images, saving your bandwidth)
# |   IMPORTANT: Uncomment this block and REPLACE 'yourdomain\.lt' with your actual domain name.
# ----------------------------------------------------------------------

# <IfModule mod_rewrite.c>
# RewriteEngine on
# RewriteCond %{HTTP_REFERER} !^$ [NC] # Allow direct access (e.g., from browser bar)
# RewriteCond %{REQUEST_FILENAME} -f [NC] # Ensure it's a real file
# RewriteCond %{REQUEST_FILENAME} \.(gif|jpe?g|png|webp|avif)$ [NC] # Target specific image types
# RewriteCond %{HTTP_REFERER} !^https?://([^.]+\.)?yourdomain\.lt [NC] # Block if referrer is NOT your domain
# RewriteRule \.(gif|jpe?g|png|webp|avif)$ - [F,NC,L] # Forbid access
# </IfModule>

# ----------------------------------------------------------------------
# | 9. WordPress Rewrite Rules (Standard)
# |   (Essential for WordPress permalinks and routing to function correctly)
# ----------------------------------------------------------------------

# The standard WordPress rewrite rules. Do not modify this section unless you know what you are doing.
# More: https://wordpress.org/support/article/htaccess/
<IfModule mod_rewrite.c>
RewriteEngine On
RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]
RewriteBase /
RewriteRule ^index\.php$ - [L]
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule . /index.php [L]
</IfModule>

# END WordPress